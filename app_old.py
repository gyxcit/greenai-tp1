import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import numpy as np

# Configuration de la page
st.set_page_config(
    page_title="Green AI Data Story",
    page_icon="üå±",
    layout="wide",
    initial_sidebar_state="expanded"
)

# Style CSS personnalis√©
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        color: #2E8B57;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background-color: #f0f8f0;
        padding: 1rem;
        border-radius: 10px;
        border-left: 5px solid #2E8B57;
    }
    .warning-box {
        background-color: #fff3cd;
        padding: 1rem;
        border-radius: 5px;
        border-left: 4px solid #ffc107;
    }
</style>
""", unsafe_allow_html=True)

@st.cache_data
def load_data():
    """Charge et nettoie les donn√©es du fichier CSV"""
    try:
        # Chargement du fichier CSV
        df = pd.read_csv('green Ai - Unpivoted (1).csv')
        
        # Transformation du format comparaison vers format standard
        # Cr√©er deux DataFrames s√©par√©s pour les mod√®les A et B
        df_a = df[['question_id', 'question_categorie', 'categorie_model', 'model A', 'token A', 
                   'time A (sec)', 'score A', 'cost A (‚Ç¨)', 'electricity A (wh)', 'co2 A (g)']].copy()
        df_b = df[['question_id', 'question_categorie', 'categorie_model', 'model B', 'token B', 
                   'time B (sec)', 'score B', 'cost B (‚Ç¨)', 'electricity B (wh)', 'co2 B (g)']].copy()
        
        # Renommer les colonnes pour avoir un format uniforme
        df_a.columns = ['question_id', 'question_categorie', 'categorie_model', 'model', 'tokens', 
                        'time (sec)', 'score', 'cost (‚Ç¨)', 'electricity (wh)', 'co2 (g)']
        df_b.columns = ['question_id', 'question_categorie', 'categorie_model', 'model', 'tokens', 
                        'time (sec)', 'score', 'cost (‚Ç¨)', 'electricity (wh)', 'co2 (g)']
        
        # Ajouter une colonne pour identifier le mod√®le (A ou B)
        df_a['model_position'] = 'A'
        df_b['model_position'] = 'B'
        
        # Combiner les deux DataFrames
        df_combined = pd.concat([df_a, df_b], ignore_index=True)
        
        # Nettoyage des donn√©es
        numeric_columns = ['tokens', 'time (sec)', 'score', 'electricity (wh)', 'co2 (g)']
        
        for col in numeric_columns:
            if col in df_combined.columns:
                # Remplacer les virgules par des points et convertir en num√©rique
                df_combined[col] = df_combined[col].astype(str).str.replace(',', '.').replace('', np.nan)
                df_combined[col] = pd.to_numeric(df_combined[col], errors='coerce')
        
        # Supprimer les lignes avec des valeurs manquantes critiques
        df_combined = df_combined.dropna(subset=['model', 'categorie_model'])
        
        # Pour les tokens, remplacer les NaN par la m√©diane de chaque mod√®le
        df_combined['tokens'] = df_combined.groupby('model')['tokens'].transform(lambda x: x.fillna(x.median()))
        
        # Si encore des NaN dans tokens, utiliser la m√©diane globale
        if df_combined['tokens'].isna().any():
            df_combined['tokens'] = df_combined['tokens'].fillna(df_combined['tokens'].median())
        
        # S'assurer qu'il n'y a pas de valeurs n√©gatives ou nulles pour size
        df_combined['tokens'] = df_combined['tokens'].clip(lower=1)
        
        return df_combined
    except Exception as e:
        st.error(f"Erreur lors du chargement des donn√©es: {e}")
        return None

def main():
    # Titre principal
    st.markdown('<h1 class="main-header">üå± Green AI Data Story</h1>', unsafe_allow_html=True)
    st.markdown("### Analyse comparative des mod√®les d'IA : Performance vs Impact Environnemental")
    
    # Chargement des donn√©es
    df = load_data()
    
    if df is None:
        st.error("Impossible de charger les donn√©es. V√©rifiez que le fichier CSV est pr√©sent.")
        return
    
    # Sidebar pour les filtres
    st.sidebar.header("üîß Filtres")
    
    # Filtre par cat√©gorie de question
    question_categories = st.sidebar.multiselect(
        "Cat√©gories de questions:",
        options=df['question_categorie'].unique(),
        default=df['question_categorie'].unique()
    )
    
    # Filtre par cat√©gorie de mod√®le
    categories = st.sidebar.multiselect(
        "Cat√©gories de mod√®les:",
        options=df['categorie_model'].unique(),
        default=df['categorie_model'].unique()
    )
    
    # Filtre par mod√®le
    models = st.sidebar.multiselect(
        "Mod√®les sp√©cifiques:",
        options=df['model'].unique(),
        default=df['model'].unique()
    )
    
    # Filtre par score minimum
    min_score = st.sidebar.slider(
        "Score minimum:",
        min_value=0,
        max_value=5,
        value=0,
        step=1
    )
    
    # Application des filtres
    filtered_df = df[
        (df['question_categorie'].isin(question_categories)) &
        (df['categorie_model'].isin(categories)) &
        (df['model'].isin(models)) &
        (df['score'] >= min_score)
    ]
    
    # ===== SECTION 1: CARTES M√âTRIQUES =====
    st.header("üìä Vue d'ensemble")
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        total_models = filtered_df['model'].nunique()
        st.metric("Nombre de mod√®les", total_models)
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        avg_score = filtered_df['score'].mean()
        st.metric("Score moyen", f"{avg_score:.2f}")
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col3:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        total_electricity = filtered_df['electricity (wh)'].sum()
        st.metric("Consommation totale", f"{total_electricity:.1f} Wh")
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col4:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        total_co2 = filtered_df['co2 (g)'].sum()
        st.metric("√âmissions CO‚ÇÇ", f"{total_co2:.1f} g")
        st.markdown('</div>', unsafe_allow_html=True)
    
    # ===== SECTION 2: COMPARAISON PAR CAT√âGORIE =====
    st.header("ÔøΩ Comparaison par Cat√©gorie")
    
    # Analyse par cat√©gorie
    category_analysis = filtered_df.groupby('categorie_model').agg({
        'score': 'mean',
        'time (sec)': 'mean'
    }).round(2)
    
    col1, col2 = st.columns(2)
    
    with col1:
        # BarChart : Score moyen par cat√©gorie
        fig_score_cat = px.bar(
            x=category_analysis.index,
            y=category_analysis['score'],
            title="Score Moyen par Cat√©gorie",
            labels={'x': 'Cat√©gorie de mod√®le', 'y': 'Score moyen'},
            color=category_analysis['score'],
            color_continuous_scale='Viridis'
        )
        fig_score_cat.update_layout(height=400)
        st.plotly_chart(fig_score_cat, use_container_width=True)
    
    with col2:
        # BarChart : Temps moyen par cat√©gorie
        fig_time_cat = px.bar(
            x=category_analysis.index,
            y=category_analysis['time (sec)'],
            title="Temps Moyen par Cat√©gorie",
            labels={'x': 'Cat√©gorie de mod√®le', 'y': 'Temps moyen (sec)'},
            color=category_analysis['time (sec)'],
            color_continuous_scale='Reds'
        )
        fig_time_cat.update_layout(height=400)
        st.plotly_chart(fig_time_cat, use_container_width=True)
    
    # ===== SECTION 3: PERFORMANCE =====
    st.header("‚ö° Performance")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Temps de R√©ponse vs Score - ScatterChart
        plot_data_perf = filtered_df.dropna(subset=['time (sec)', 'score'])
        
        fig_time_score = px.scatter(
            plot_data_perf,
            x='time (sec)',
            y='score',
            color='categorie_model',
            size='tokens',
            hover_data=['model'],
            title="Temps de R√©ponse vs Score",
            labels={'time (sec)': 'Temps de r√©ponse (sec)', 'score': 'Score de performance'}
        )
        fig_time_score.update_layout(height=400)
        st.plotly_chart(fig_time_score, use_container_width=True)
    
    with col2:
        # Nombre de Tokens par Mod√®le - BarChart horizontal
        tokens_by_model = filtered_df.groupby('model')['tokens'].mean().sort_values(ascending=True)
        
        fig_tokens = px.bar(
            x=tokens_by_model.values,
            y=tokens_by_model.index,
            orientation='h',
            title="Tokens Moyens par Mod√®le",
            labels={'x': 'Nombre de tokens moyen', 'y': 'Mod√®le'},
            color=tokens_by_model.values,
            color_continuous_scale='Blues'
        )
        fig_tokens.update_layout(height=400)
        st.plotly_chart(fig_tokens, use_container_width=True)
    
    # ===== SECTION 4: IMPACT ENVIRONNEMENTAL =====
    st.header("üå± Impact Environnemental")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Impact Environnemental par Cat√©gorie - BarChart
        env_by_category = filtered_df.groupby('categorie_model').agg({
            'electricity (wh)': 'mean',
            'co2 (g)': 'mean'
        }).round(2)
        
        fig_env_cat = make_subplots(
            rows=1, cols=2,
            subplot_titles=('√âlectricit√© (Wh)', 'CO‚ÇÇ (g)'),
            specs=[[{"secondary_y": False}, {"secondary_y": False}]]
        )
        
        fig_env_cat.add_trace(
            go.Bar(x=env_by_category.index, y=env_by_category['electricity (wh)'], 
                   name='√âlectricit√©', marker_color='lightblue'),
            row=1, col=1
        )
        
        fig_env_cat.add_trace(
            go.Bar(x=env_by_category.index, y=env_by_category['co2 (g)'], 
                   name='CO‚ÇÇ', marker_color='lightcoral'),
            row=1, col=2
        )
        
        fig_env_cat.update_layout(height=400, showlegend=False, title_text="Impact Environnemental par Cat√©gorie")
        st.plotly_chart(fig_env_cat, use_container_width=True)
    
    with col2:
        # √âmissions CO‚ÇÇ par Mod√®le - BarChart
        co2_by_model = filtered_df.groupby('model')['co2 (g)'].sum().sort_values(ascending=False)
        
        fig_co2_model = px.bar(
            x=co2_by_model.index,
            y=co2_by_model.values,
            title="√âmissions CO‚ÇÇ Totales par Mod√®le",
            labels={'x': 'Mod√®le', 'y': 'CO‚ÇÇ total (g)'},
            color=co2_by_model.values,
            color_continuous_scale='Reds'
        )
        fig_co2_model.update_layout(height=400)
        fig_co2_model.update_xaxes(tickangle=45)
        st.plotly_chart(fig_co2_model, use_container_width=True)
    
    # ===== SECTION 5: EFFICACIT√â =====
    st.header("ÔøΩ Efficacit√©")
    
    # Calcul de l'efficacit√©
    filtered_df = filtered_df.copy()  # √âviter les SettingWithCopyWarning
    filtered_df['efficacite_co2'] = filtered_df['score'] / (filtered_df['co2 (g)'] + 0.01)
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Efficacit√©: Score / CO‚ÇÇ - BarChart
        efficiency_by_model = filtered_df.groupby('model')['efficacite_co2'].mean().sort_values(ascending=False).head(10)
        
        fig_efficiency = px.bar(
            x=efficiency_by_model.values,
            y=efficiency_by_model.index,
            orientation='h',
            title="Top 10 - Efficacit√© (Score/CO‚ÇÇ)",
            labels={'x': 'Efficacit√© (Score/g CO‚ÇÇ)', 'y': 'Mod√®le'},
            color=efficiency_by_model.values,
            color_continuous_scale='Greens'
        )
        fig_efficiency.update_layout(height=400)
        st.plotly_chart(fig_efficiency, use_container_width=True)
    
    with col2:
        # Trade-off: Performance vs Impact - ScatterChart
        plot_data_tradeoff = filtered_df.dropna(subset=['score', 'co2 (g)'])
        
        fig_tradeoff = px.scatter(
            plot_data_tradeoff,
            x='co2 (g)',
            y='score',
            color='categorie_model',
            size='tokens',
            hover_data=['model'],
            title="Trade-off: Performance vs Impact",
            labels={'co2 (g)': '√âmissions CO‚ÇÇ (g)', 'score': 'Score de performance'}
        )
        fig_tradeoff.update_layout(height=400)
        st.plotly_chart(fig_tradeoff, use_container_width=True)
    
    # Cartes r√©capitulatives
    col1, col2 = st.columns(2)
    
    with col1:
        st.subheader("üèÖ Champion d'efficacit√©")
        best_efficiency = filtered_df.loc[filtered_df['efficacite_co2'].idxmax()]
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.write(f"**Mod√®le:** {best_efficiency['model']}")
        st.write(f"**Efficacit√©:** {best_efficiency['efficacite_co2']:.2f}")
        st.write(f"**Score:** {best_efficiency['score']}")
        st.write(f"**CO‚ÇÇ:** {best_efficiency['co2 (g)']}g")
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.subheader("‚ö†Ô∏è Mod√®le √† fort impact")
        worst_co2 = filtered_df.loc[filtered_df['co2 (g)'].idxmax()]
        st.markdown('<div class="warning-box">', unsafe_allow_html=True)
        st.write(f"**Mod√®le:** {worst_co2['model']}")
        st.write(f"**CO‚ÇÇ:** {worst_co2['co2 (g)']}g")
        st.write(f"**Score:** {worst_co2['score']}")
        st.write(f"**√âlectricit√©:** {worst_co2['electricity (wh)']}Wh")
        st.markdown('</div>', unsafe_allow_html=True)
    
    # ===== SECTION 6: ANALYSE AVANC√âE =====
    st.header("üìà Analyse Avanc√©e")
    
    col1, col2 = st.columns(2)
    
    with col1:
        # Qualit√© vs Consommation √ânerg√©tique - ScatterChart
        plot_data_energy = filtered_df.dropna(subset=['score', 'electricity (wh)'])
        
        fig_quality_energy = px.scatter(
            plot_data_energy,
            x='electricity (wh)',
            y='score',
            color='categorie_model',
            size='tokens',
            hover_data=['model'],
            title="Qualit√© vs Consommation √ânerg√©tique",
            labels={'electricity (wh)': 'Consommation √©lectrique (Wh)', 'score': 'Score de qualit√©'}
        )
        fig_quality_energy.update_layout(height=400)
        st.plotly_chart(fig_quality_energy, use_container_width=True)
    
    with col2:
        # Comparaison de Latence - BarChart horizontal
        latency_by_model = filtered_df.groupby('model')['time (sec)'].mean().sort_values(ascending=True)
        
        fig_latency = px.bar(
            x=latency_by_model.values,
            y=latency_by_model.index,
            orientation='h',
            title="Temps de R√©ponse par Mod√®le",
            labels={'x': 'Temps de r√©ponse moyen (sec)', 'y': 'Mod√®le'},
            color=latency_by_model.values,
            color_continuous_scale='RdYlGn_r'
        )
        fig_latency.update_layout(height=400)
        st.plotly_chart(fig_latency, use_container_width=True)
    
    # Tableau des Meilleurs Compromis
    st.subheader("üéØ Tableau des Meilleurs Compromis")
    
    # Calcul du score global (combinaison de performance et d'efficacit√©)
    model_summary = filtered_df.groupby('model').agg({
        'score': 'mean',
        'co2 (g)': 'mean',
        'electricity (wh)': 'mean',
        'time (sec)': 'mean',
        'tokens': 'mean',
        'efficacite_co2': 'mean'
    }).round(2)
    
    # Score global normalis√© (plus c'est haut, mieux c'est)
    model_summary['score_global'] = (
        (model_summary['score'] / model_summary['score'].max()) * 0.4 +
        (model_summary['efficacite_co2'] / model_summary['efficacite_co2'].max()) * 0.3 +
        (1 - model_summary['time (sec)'] / model_summary['time (sec)'].max()) * 0.3
    ).round(3)
    
    model_summary = model_summary.sort_values('score_global', ascending=False)
    
    # Affichage du tableau avec mise en √©vidence du top 3
    display_summary = model_summary[['score', 'co2 (g)', 'electricity (wh)', 'time (sec)', 'efficacite_co2', 'score_global']]
    display_summary.columns = ['Score Moyen', 'CO‚ÇÇ Moyen (g)', '√âlectricit√© (Wh)', 'Temps (sec)', 'Efficacit√© CO‚ÇÇ', 'Score Global']
    
    # Mise en √©vidence du top 3
    def highlight_top3(row):
        if row.name in display_summary.index[:3]:
            return ['background-color: #90EE90'] * len(row)
        return [''] * len(row)
    
    styled_summary = display_summary.style.apply(highlight_top3, axis=1)
    st.dataframe(styled_summary, use_container_width=True)
    
    # Top 3 en √©vidence
    st.subheader("ü•á Top 3 des Meilleurs Compromis")
    col1, col2, col3 = st.columns(3)
    
    top_models = display_summary.index[:3]
    
    with col1:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.write(f"ü•á **{top_models[0]}**")
        st.write(f"Score Global: {display_summary.loc[top_models[0], 'Score Global']}")
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col2:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.write(f"ü•à **{top_models[1]}**")
        st.write(f"Score Global: {display_summary.loc[top_models[1], 'Score Global']}")
        st.markdown('</div>', unsafe_allow_html=True)
    
    with col3:
        st.markdown('<div class="metric-card">', unsafe_allow_html=True)
        st.write(f"ü•â **{top_models[2]}**")
        st.write(f"Score Global: {display_summary.loc[top_models[2], 'Score Global']}")
        st.markdown('</div>', unsafe_allow_html=True)
    
    # ===== SECTION 7: DONN√âES BRUTES =====
    st.header("üìã Donn√©es Brutes")
    
    if st.checkbox("Afficher les donn√©es filtr√©es"):
        st.dataframe(filtered_df)
        
        # T√©l√©chargement des donn√©es filtr√©es
        csv = filtered_df.to_csv(index=False)
        st.download_button(
            label="üì• T√©l√©charger les donn√©es filtr√©es",
            data=csv,
            file_name="green_ai_filtered_data.csv",
            mime="text/csv"
        )

if __name__ == "__main__":
    main()